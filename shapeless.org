#+title:  入門⚡Shapeless
#+author: Windymelt
#+date:   2022-12-12

#+html_head: <style> @font-face {font-family: "Berkeley Mono"; src: url("https://www.3qe.us/webfont/BerkeleyMono-Regular.woff2") format("woff2"), url("https://www.3qe.us/webfont/BerkeleyMono-Regular.woff") format("woff");} </style>

#+html_head: <style> p { line-height:1.2; } pre, code { font-family: Berkeley Mono; } </style>
#+html_head: <style>table {margin-left:auto; margin-right:auto;}</style>
#+html_head: <style>.right { margin-top: 5em; margin-botton: 5em; text-align:end;}</style>

#+begin_center
#+begin_export html
<a href="https://b.hatena.ne.jp/entry/" class="hatena-bookmark-button" data-hatena-bookmark-layout="vertical-normal" data-hatena-bookmark-lang="en" title="このエントリーをはてなブックマークに追加"><img src="https://b.st-hatena.com/images/v4/public/entry-button/button-only@2x.png" alt="このエントリーをはてなブックマークに追加" width="20" height="20" style="border: none;" /></a><script type="text/javascript" src="https://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script>
<a href="https://www.buymeacoffee.com/windymelt"><img src="https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=windymelt&button_colour=FF5F5F&font_colour=ffffff&font_family=Lato&outline_colour=000000&coffee_colour=FFDD00" /></a>
#+end_export
#+end_center

* 入門⚡Shapeless

#+begin_export html
<link rel="stylesheet"
      href="./highlight/styles/mono-blue.min.css">
<script src="./highlight/highlight.min.js"></script>
#+end_export

#+begin_right
#+begin_quote
/贅沢な名だね。 ----- 湯婆婆, 『千と千尋の神隠し』/
#+end_quote
#+end_right

[[./logo.jpeg]]

** はじめに

この記事では、プログラミング言語 [[https://scala-lang.org][Scala]] において *ジェネリックプログラミング(Generic Programming)* を行うためのライブラリである *[[https://github.com/milessabin/shapeless][shapeless]]* の基本的な利用方法を解説します。

*** この記事で使うshapelessについて

この記事は、 shapeless 2.3.5 に基いて執筆されています。当該バージョンのshapelessは、 =build.sbt= において以下のようにインストールできます:

#+begin_example scala
libraryDependencies += "com.chuusai" %% "shapeless" % "2.3.5"
#+end_example

*** この記事で使うScalaについて

この記事は、Scala 2.13.8に基いて執筆されています。Scala 3系においてもshapelessを利用することはできますが、執筆時点で筆者はScala 3に関する知識を十分に持ち合わせていませんから、Scala 3における動作に関する記述は割愛します。

** ジェネリックプログラミングとは

ジェネリックプログラミングとは、ある問題領域における *構造* を表現する手段として具体的なclassやtraitを使わず、より抽象的な道具を用いて構造を表現するプログラミング手法です。

また、ジェネリックプログラミングは、JavaやScalaにおけるジェネリクス / Parametarized Typesとは関係ないため注意が必要です。

*** <<genericquote>>ジェネリックプログラミング(shapeless)が必要になる例

- 同じ型の要素を同じ順序で持つcase class同士を相互変換する
- 異なる型が混在し、なおかつ型安全な =Map= を利用する

いずれにせよ、ジェネリックプログラミングとは、クラスや型といった具体的な要素から「構造」という要素を取り出し、それ単体で物事をうまく扱おうという考え方を指しています。
ジェネリックプログラミングを使うと、構造と構成要素の型を維持しつつ、 =class= や =trait=
の垣根を飛び越えてデータを操作できるようになります。

_ジェネリックプログラミングとは、オブジェクトから名前を消し去り構造に着目することだ、と言ってもよさそうです。_

** Shapelessに登場する基礎概念

Shapelessでは、型同士を組み合わせたり取り出したりします。この節では、この目的を達成するために用意されている道具のうち基礎的なものを紹介します。代数的データ型について知っている場合は読み飛ばしてかまいません。

*** 代数的データ型(ADTs)

先程、 [[genericquote]] で以下のように述べました。

#+begin_quote
ジェネリックプログラミングとは、クラスや型といった具体的な要素から「構造」という要素を取り出し、それ単体で物事をうまく扱おうという考え方を指しています。
#+end_quote

では、 *構造* とは何でしょう。数学的な難しい話は割愛しますが、 *代数的データ型(Algebraic Data Types,
ADTs)* を用いることで再帰を含む複雑なデータ型を表現できることがわかっています。
そして、多くの言語ではこのADTsを言語レベルである程度サポートするための機能が備えられており、
Scalaもこうした言語のうちの一つです(後述する =Tuple= や =sealed trait= などがこれをサポートしています)。

ADTsは、 **直積(Product)** と **直和(Coproduct、 余積とも)** から成るデータ型の総称です。
数学的な詳細な説明は割愛しますが、直積は複数のデータ型をくっつけて
_両方のデータを同時に表現できるようにした_ もの(型を組にしたもの)であり、直和は複数のデータ型をくっつけて _このうちどれか一つを表現できるようにした_ ものです。
この2つを組み合わせることでADTsは様々な抽象的なデータ型を表現する能力を得ます。

例えば、よく知られたデータ構造である[[https://ja.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E6%9C%A8][二分木]]は「木か葉[fn::木構造において、
それ以上木構造が深くならないような部分のことを葉と呼びます。]のいずれか」
という直和型を2つ合わせて直積にしたものと考えることができ(直和の直積)、ADTsで表現することができます。

ADTsを表現するためにScalaに最初から備わっている機能として、 *タプル* 、 *=Either=* 型 、 *クラス* 、
*=sealed trait=* などがあります。そしてshapelessは、ADTsを専門に扱い、柔軟なデータ操作を提供するためのライブラリです。

まずはScalaに備わっているADTsをサポートするための機能がどのような性質を持つか復習しましょう。

*** <<scala-adts>>ScalaにおけるADTsをサポートする手段

この節では、shapelessの理解をより深めるために、Scalaで型を組み合わせるために用意されているいくつかの方法について復習します。

*タプル* は、複数の型を組み合わせて1つの型にします。タプル自体は最も単純な型構築子[fn::値を持ちうる通常の意味での型ではなく、型を代入することで型を生成する、関数のような型のことを型構築子(型コンストラクタ)と呼びます。]の一つであり、それ自体多くの機能を持ちませんが、複数の型を一つにし、それをまた分解できるという最も基本的な機能を提供します。

#+begin_example scala
type StringIntTuple = Tuple2[String, Int]
/* もしくは */
type StringIntTuple = (String, Int)
val tupled: StringIntTuple = ("hoge", 42)
tupled._1 // => "hoge"
tupled._2 // => 42
#+end_example

*=Either=* も複数の型を組み合わせて1つの型にしますが、タプルとは違い、どちらかの型であることを表現します。
実際に値を入れたり取り出したりする際には、 =Left= と =Right= とを用いてどちらの型かを教えます:

#+begin_example scala
type StringIntEither = Either[String, Int]
val l: StringIntEither = Left("hoge")
val r: StringIntEither = Right(42)
#+end_example

*クラス* は、ある意味タプルの強化版です。なぜなら、複数の型を名前付きのフィールドとして持ち、さらに手続きをメソッドとして持っているからです:

#+begin_example scala
case class FooClass(s: String, i: Int) {
  def toString(): String = s"s: $s, i: $i"
}
#+end_example

*=sealed trait=* もまた、 =Either= の強化版です。なぜなら、 =Either= が提供する「型を選ぶ」という機能に付け加えて、それぞれの名前が提供されるからです。

Scalaユーザにとってお馴染の =Option= も =sealed trait= で実装されています:

#+begin_example scala
sealed trait Option[+A]
case class Some[+A](x: A) extends Option[A]
case object None extends Option[Nothing]
#+end_example

ADTsの観点から見ると、 =Option= は =Some= (1要素の直積) と =None= (0要素の直積)との直和である、と見ることができます。

*Scalaには複数の型を組み合わせて1つにするための機能がいくつも用意されている* ことが分かりましたね。

それぞれの機能には以下のような共通点があることを確認してください:

- 名前を付けられるものと、付けられないものがある。
  - 名前を付けられる: クラス、 =sealed trait=
  - 名前を付けられない: =Tuple= 、 =Either=
- 3つ以上の型を組み合わせられるものと、組み合わせられないものがある。
  - 組み合わせられる: =Tuple= (ただし、 =Tuple22= までしか用意されていないので22個が上限)、クラス、 =sealed trait=
  - 組み合わせられない: =Either=

*** Shapeless

[[scala-adts][前項]]では、Scalaの言語機能でもある程度ADTsを実装できることを示しました。しかしながら、Scalaの標準言語機能のみを使ってADTsを実装する場合、以下のような制約が伴います:

- =Tuple= が22要素までにしか対応しておらず、これを超えるような直積をともなうADTsを表現できない。
- =TupleN= と =TupleN-1= , =TupleN+1= との間に型的な関連がほぼ無いため、相互運用性が低い。
- クラスや =sealed trait= を用いたADTsは、型が具体的すぎるため柔軟性が低い。
  - 例えば、同じ構造を持つクラス同士を変換したくても、
    手で全ての要素を取り出してコンストラクタに渡さなければならない
- =Either= は2要素にしか対応しておらず、2要素を越えるADTsを表現するためには複数の =Either= を組み合わせる必要があるが、その運用は複雑を極める。

ShapelessはこのようなADTsを扱う上での問題をできるだけ解消し、
ユーザがADTsの操作に注力できるようにします。Shapelessは従前の問題を解消しています:

- 事実上無制限長の直積・直和を表現できる。
- 直積はその長さによって型同士の関連性を持つことができる。
- 同じ構造のADTsは同じ表現になる。
- =case class= との相互運用を行う方法が用意されている。

ここからは、実際にshapelessを使う方法について解説していきます。

** HList

Shapelessで直積を表現するには、 *=HList=* データ型を使います。 =HList= は、
[[scala-adts][前項]]で登場したタプルと似た振舞いをします。つまり、複数の型を1つにし、
その値がすべての型の値を持つことを保証します。 =HList= は、 Heterogeneous List (異種混交リスト)の略です。

<<<=HList= を構築>>>するには、 =::= を型の間に置き、最後に *=HNil=* を置きます。
=::= は、型構築子としても、値構築子としても使うことができます。

#+begin_example scala
import shapeless.{::, HNil}
type IntStringHList = Int :: String :: HNil // (Int, String) にほぼ対応する
val hlis: IntStringHList = 42 :: "foo" :: HNil
// hlis: shapeless.::[Int, shapeless.::[String, HNil]] = 42 :: "foo" :: HNil
#+end_example

=::= と =HNil= は =HList= のサブタイプです。

#+begin_example scala
val hlis: HList = 10 :: "bar" :: HNil
val hn: HList = HNil
#+end_example

形が分かっている =HList= からは型安全に値を取り出すことができます:

#+begin_example scala
def stringifyIntString(is: IntStringHList): String = {
  val i = is.head      // type safe -- 常にInt
  val s = is.tail.head // type safe -- 常にString
  ...
}
#+end_example

=match= 式で内容を取り出すこともできます:

#+begin_example scala
hlis match {
  case (i: Int) :: (s: String) :: HNil => s"int: $i, string: $s"
} // => "int: 42, string: foo"
#+end_example

*** 型の中置記法

冒頭で示したコードのうち、返り値の型に注目してください。

#+begin_example scala
val hlis: IntStringHList = 42 :: "foo" :: HNil
// hlis: shapeless.::[Int, shapeless.::[String, HNil]] = 42 :: "foo" :: HNil
#+end_example

=shapeless.::[Int, shapeless.::[String, HNil]]= がリストのような形式になっているのが分かるはずです。
Scalaには2-arityの型を中置する記法がある[fn::https://stackoverflow.com/questions/33347955/real-life-examples-of-scala-infix-types に型中置の事例が紹介されています。]ため、これを =Int :: String :: HNil= と書けるのです。

#+BEGIN_SRC dot :file hlist.png :exports results :cache yes
  digraph {
    is[label="::"];
    i[label="Int"];
    sh[label="::"];
    s[label="String"];
    h[label="HNil"];
    is -> i[label="head"];
    is -> sh[label="tail"];
    sh -> s[label="head"];
    sh -> h[label="tail"];
  }
#+END_SRC

#+RESULTS[1259b5d991ffb75a6fd23671e1565095c737c2bd]:
[[file:hlist.png]]

*** case class との違い

先程の =hlis= とほぼ同じ内容のものを =case class= で作成して比較してみます。

#+begin_example scala
case class Hlis(first: Int, second: String)
val hlis2 = Hlis(42, "foo")
#+end_example

=case class= で作った =hlis2= は、 =Hlis= という固有のクラス名と、 =first=, =second=
という固有のフィールド名を持っています。その一方、 =hlis= は =Int= と =String= をこの順で保持している =HList= であること以外に何も情報を持ちません。いくつかの性質を表にまとめました:

#+name: comparison1
| 性質                         | case class | HList | Tuple |
|------------------------------+------------+-------+-------|
| いくつでもフィールドを持てる | true       | true  | false |
| 型がフィールド名を持つ       | true       | false | false |
| 型が固有名を持つ             | true       | false | false |

=HList= は、 =case class= ほど強い表現力を持たない代わりに、動的にフィールドを追加したり、特定のフィールドを持つすべての
=HList= を受け取るメソッドを定義したりといった強い柔軟性を持つことができています。

*** 例: 色を混ぜる

=HList= を利用した簡単な例として、赤・緑・青・透明度の4要素で表現される色を混ぜ合わせるメソッドを定義してみましょう。

#+begin_example scala
type RGBA = Int :: Int :: Int :: Int :: HNil

val red: RGBA = 255 :: 0 :: 0 :: 255 :: HNil
val green: RGBA = 0 :: 255 :: 0 :: 255 :: HNil

def brendAverage(xs: Int :: HList, ys: Int :: HList): Int :: HList = (xs, ys) match {
  case (x :: (x2: Int) :: HNil, y :: (y2: Int) :: HNil) => (x + y) / 2 :: (x2 + y2) / 2 :: HNil
  case (x :: (x2: Int) :: xs, y :: (y2: Int) :: ys) => (x + y) / 2 :: brendAverage(x2 :: xs, y2 :: ys)
  case otherwise => ???
}

brendAverage(red, green) // => 127 :: 127 :: 0 :: 255 :: HNil
#+end_example

直接 =HList= をインデックスアクセスすることもできましたが、今回は =HList=
らしく再帰的に定義してみました。この =brendAverage= メソッドは、
赤・緑・青の3要素しか持たない色を渡しても動作します:

#+begin_example scala
brendAverage(255 :: 0 :: 255 :: HNil, 0 :: 255 :: 0 :: HNil)
// => 127 :: 127 :: 127 :: HNil
#+end_example

既にshapelessがもたらす柔軟性が現われ始めていますね。

*** <<hlistops>>HListから特定のフィールドを抽出する(shapeless.ops.hlist)

<<hlistopsselector>> =shapeless.ops.hlist.Selector= を使うと、 =HList= から特定のフィールドを抜き出すことができます。この機能は、メソッドからは具体的な =HList= の形が分からないが特定の型を含んでいることを要求したい場合に便利です。

メソッドの =implicit= 引数として =Selector= を要求することで、特定のフィールドを抜き出せるようになります。該当する =Selector= はコンパイル時に自動的に渡されます。

#+begin_example scala
def getInt[H <: HList](h: H)(implicit sel: shapeless.ops.hlist.Selector[H, Int]) = {
  // この中からは、Hの具体的な型がわからないことに注目。
  // 型がわからなくても、SelectorがあることによってInt型が含まれていることが保証される
  s"$h has int member ${sel(h)}"
}

getInt("foo" :: 42 :: HNil) // => "foo :: 42 :: HNil has int member 42"
getInt("foo" :: false :: HNil) // => コンパイラはSelectorを発見できないのでコンパイルエラーになる
#+end_example

この例ではフィールドの抽出でしたが、 _一般に具体的な形が分からない =HList= を操作するようなメソッドを定義するときは、 =implicit= で *=ops=* を受け取り、呼び出せるかどうかをコンパイラに委ねるというパターンになります。_

=shapeless.ops.hlist= には、他にも以下のような =ops= が用意されています:

- =Align= : =HList= を指定した順序に並び換える
  - =Generic= (後述)と組み合わせるときなどの型合わせに使う
- =Diff= : =HList= から特定の型集合を削除する
  - 余分な型を捨てたいときに使う
- =Prepend= : =HList= に別の =HList= を追加する
  - なにか =HList= を付け加えて返したいときなどに便利

** Coproduct

Shapelessで直和を表現するには、 *=Coproduct=* データ型を使います。 =Coproduct= は、[[scala-adts][前項]]で登場した =Either= と似た振舞いをします。つまり、複数の型を1つにし、その値がどちらかの型の値を持つことを保証します。

<<<=Coproduct= を構築>>>するには、 =:+:= を型の間に置き、最後に =CNil= を置きます。

#+begin_example scala
import shapeless.{:+:, CNil}
type IntOrString = Int :+: String :+: CNil // Either[Int, String]にほぼ対応する
#+end_example

=Coproduct= は =Either= と異なり、リスト状の構造になっています:

#+BEGIN_SRC dot :file coproduct.png :exports results :cache yes
  digraph {
    is[label=":+:"];
    i[label="Int"];
    sc[label=":+:"];
    s[label="String"];
    c[label="CNil"];
    is -> i[label="Inl"];
    is -> sc[label="Inr"];
    sc -> s[label="Inl"];
    sc -> c[label="Inr"];
  }
#+END_SRC

#+RESULTS[5571865644b10ef1dab58257925d01a69f6141c8]:
[[file:coproduct.png]]

このため、 _=Coproduct= は3つ以上の型を自然に組み合わせることができます。_ =HList= に似ていますね。

*** Inl / Inr

=Coproduct= の値構築子は =Inl= と =Inr= です[fn::Inは *Injection* の略で、圏論の用語に由来しています。型A, Bのそれぞれから余積A+Bに写すような射のことをCanonical injection(標準入射)と呼びます。 https://ja.wikipedia.org/wiki/%E4%BD%99%E7%A9%8D 。個人的には非常に難解な名付けで、良くないと思っています。]。これは =Either= における =Left= と =Right= に対応します。

#+begin_example scala
import shapeless.{Inl, Inr}
val i: IntOrString = Inl(42) // Left(42) に対応する
val s: IntOrString = Inr(Inl("foo")) // Right("foo")に対応する
#+end_example

=Inl= と =Inr= の唯一の役割は、元々のプリミティブな値を =Coproduct= の型の文脈に押し上げることです。言い換えると、型レベルの標識を行い、単なる =Int= なのか、それとも =Int :+: String :+: CNil= 上の =Int= なのかを区別させるためだけに存在しています。

さっきのは /MT免許/ です。 /AT免許/ として =Inject= が用意されています。 =Inl= や =Inr= を省略できます:

#+begin_example scala
import shapeless.syntax.inject._
val s2: IntOrString = "foo".inject[IntOrString] // => Inr(Inl("foo"))
// これは以下の表現と等価
import shapeless.ops.coproduct.Inject
val s3: IntOrString = Inject[IntOrString, String].apply("foo")
#+end_example

先程も述べた通り、 =Coproduct= が =Either= よりも優れている点として、 _3つ以上の型を自然に組み合わせられる_ というものがあります。

#+begin_example scala
case class ErrorA(msg: String)
case class ErrorB(msg: String)
case class ErrorC(msg: String)
case class ErrorD(msg: String)
type Errors = ErrorA :+: ErrorB :+: ErrorC :+: ErrorD :+: CNil

val ec: Errors = ErrorC("injecting").inject[Errors] // => Inr(Inr(Inl(ErrorC(...))))
#+end_example

=Either= でも似たような事はできますが、結合順序の定義が悪いため =Coproduct= ほど洗練された定義を与えられません。

*** Inl / Inr 補足

これは補足なのでスキップしてかまいません。

=Coproduct= が右向きのリスト状に構成されている都合上、 =Inl= は常に値を保持する役回りであり、 =Inl= は型を1つずらす操作に対応します。このため、 =Coproduct= の値表現は常に =Inr(...(Inl(値)))= という表現になります。この感覚には少し慣れが必要です。というのも、 =HList= の場合は順番が重要であることは直感的に理解できる一方で、 =Coproduct= で順番を気にしなければならないことは直感的ではないからです(実際、 =sealed trait= では順番を気にする必要がありません)。

=HList= の値を構築したときは複数の束ねたい型と唯一の値構築子 =::= を用いましたが、 =Coproduct= の場合は渡す型は一つだけであり、 =Coproduct= のどの型にあてはまるかを指示するために =Inl= と =Inr= という型構築子を使い分けます[fn::この面白い対称関係は、直積と余積が圏論的双対になっていることに由来するものだと思いますが、専門家ではないのでわかりません。]。

リボルバー銃の弾倉を回す操作と、引き金を引く操作になぞらえると分かりやすいかもしれません。必要な数だけ弾倉を回し、引き金を引くことで望みの型が飛び出すのです。

** Record

前項では、 =HList= を構築する方法と =Coproduct= を構築する方法について学びました。ここでは =HList= にフィールド名の概念を追加した Record について学びます。

Recordはちょうど型安全でポリモーフィックな =Map= のように振舞い、フィールド名を用いて型安全に値を取り出すことができます。Rubyといった言語の連想配列が、さらに型安全になった様子をイメージすると分かりやすいと思います。

Recordはちょうど =HList= 以上 =case class= 未満の表現力を持ちます。
[[comparison1][前掲の表]]にRecordを増やしてみることでこれを確認してみましょう:

#+name: comparison2
| 性質                         | case class | Record | HList | Tuple |
|------------------------------+------------+--------+-------+-------|
| いくつでもフィールドを持てる | true       | true   | true  | false |
| 型がフィールド名を持つ       | true       | true   | false | false |
| 型が固有名を持つ             | true       | false  | false | false |

Recordはそれ自体に名前を持ちませんが、各フィールドには名前を持つことができ、
その名前でフィールドにアクセスできます。

*** =->>= を使ってRecordを構築する

=HList= を構築する方法と =->>= とを組み合わせることで、<<<=Record= を構築する>>>ことができます。

#+begin_example
import shapeless.syntax.singleton._ // ->>のために必要
val rec1 = ("foo" ->> "bar") :: ("hoge" ->> 42) :: HNil // フィールド"foo"と"bar"を持つRecordを作成
#+end_example

Recordの型は、 =FieldType[K, V]=
[fn::https://github.com/milessabin/shapeless/blob/417d34b7f30b8be89a80fca7802c159aedac85f5/core/shared/src/main/scala/shapeless/labelled.scala#L25]を集めた =HList= になります。
上の例では、 =rec1= の型は =FieldType["foo", String] :: FieldType["hoge", Int] :: HNil= です。

=Record= には =apply= が定義されているので、よくある =Map= と同じようにアクセスできます:

#+begin_example scala
rec1("foo") // => "bar"
#+end_example

=+= や =-= といったメソッドが用意されており、フィールドを自由に追加・削除できます:

#+begin_example scala
rec1 + ("buzz" ->> true) // => ("foo" ->> "bar") :: ("hoge" ->> 42) :: ("buzz" ->> true) :: HNil
rec1 - "foo" // => ("hoge" ->> 42) :: HNil
#+end_example

*** Record構文を使ってRecordを構築する

=shapeless.record= に、 =Record= を構築するための構文が定義されています。

#+begin_example scala
import shapeless.record._
val rec2 = Record(foo = 42, bar = "hoge")
#+end_example

ただしこの構文は =Symbol= に依存しているため、キーの型は =String= ではなく =Symbol= になります。

#+begin_example scala
rec2(Symbol("foo")) // => 42
#+end_example

*** Recordの型構築構文

=->>= を駆使する代わりに、 =Record.`キー -> 型, ...`.T= と書くことで、 =Record= 型を構築することができます。

#+begin_example scala
type Rec1 = Record.`"foo" -> String, "hoge" -> Int`.T
#+end_example

*** <<recordops>>Recordから特定のフィールドを抽出する(shapeless.ops.record)

[[hlistops]]で説明したのと同様に、 =Record= に対する操作を定めた =shapeless.ops.record= を使うことで =Record= 全体の型が分からなくてもフィールドの追加や削除などを行うことができます。

メソッドの =implicit= 引数として =Extractor= を要求することで、特定のフィールドを抜き出せるようになります。該当する =Extractor= はコンパイル時に自動的に渡されます。

#+begin_example scala
import shapeless.ops.record.Extractor
def getAge[H <: HList](rec: H)(
    implicit ex: Extractor[H, Record.`'age -> Int, 'name -> String`.T]
  ) = {
  val extracted = ex(rec)
  val name = extracted(Symbol("name"))
  val age = extracted(Symbol("age"))
  s"$name is $age year(s) old"
}

val me = Record(name = "Windymelt", age = 29, gender = "male")
val usa = Record(name = "USA", capital = "Washington D.C.", age = 246)

getAge(me) // => "Windymelt is 29 year(s) old"
getAge(usa) // "USA is 246 year(s) old"
#+end_example

面白いことに、 =me= と =usa= の型はそれぞれバラバラですが、 =getAge= はこの違いを乗り越えて =name= フィールドと =age= フィールドのみを取り出し、名前と年齢を表示できていますね。

** 任意のADTsに対して操作を定義する

この節では、任意のADTsと =HList= ・ =Coproduct= とを相互変換する *=Generic=* と、それの =Record= 版である *=LabelledGeneric=* について解説します。

今まで説明した内容では、現実の =case class= と =HList= との相互作用については扱ってきませんでした。これから説明する =Generic= / =LabelledGeneric= はこの二者のインターフェイスとして作用し、ビジネスロジックを記述する一般のScalaの世界と、抽象化の力を得たshapelessの世界とを行き来できるようにします。

*** Generic

=shapeless.Generic= を使うことで、 =case class= や =Tuple= と =HList= とを相互変換できます:

#+begin_example scala
case class Person(name: String, age: Int, gender: String)
val me1 = Person("Windymelt", 29, "male")

shapeless.Generic[Person].to(me1) // => "Windymelt" :: 29 :: "male" :: HNil
shapeless.Generic[Person].from("Windymelt" :: 29 :: "male" :: HNil) // => Person("Windymelt", 29, "male")
#+end_example

#+BEGIN_SRC dot :file generic.png :exports results :cache yes
  digraph {
  case[label="case class Person(name: String, age: Int, gender: String)"];
  hlist[label="String :: Int :: String :: HNil"];
  case -> hlist [label="Generic[Person].to"];
  hlist -> case [label="Generic[Person].from"];
  }
#+END_SRC

#+RESULTS[b03de6bb249ccdff15eca4d12d020eba0bd0569c]:
[[file:generic.png]]

=to= と =from= がどちらの向きかを覚えるには少し慣れが必要です。

**** <<genericex>>例: 任意のcase classからIdを取り出す

=Id= という型をフィールドとして持っている任意の =case class= から =Id= を取り出してみましょう。必要な道具は、 =Generic= と [[hlistopsselector][=Selector=]] です。

#+begin_example scala
case class Id(x: Long)
case class Car(id: Id, mass: Int, cost: Int)
case class Tweet(id: Id, user: String, content: String)

def selectId[A, H <: HList](x: A)(
    implicit gen: shapeless.Generic.Aux[A, H],
    sel: shapeless.ops.hlist.Selector[H, Id]
  ): Id = {
  val hlist = gen.to(x)
  sel(hlist)
}

selectId(Car(Id(123), 1000, 3000000)) // => Id(123)
selectId(Tweet(Id(666), "@windymelt", "#welovescala")) // => Id(666)
#+end_example

互いに全く関係の無い =Car= と =Tweet= から =Id= を取り出せました。shapelessの強力さがお分かりいただけましたか？

=shapeless.Generic.Aux= という型が使われていることに注目してください。以下の理由から、 =Generic= の代わりに =Generic.Aux= を使う必要があります:

- =Selector= は取り出したい型を含んだ =HList= を型引数として要求する
- =Generic= は変換を担当するが、その変換結果どのような =HList= になるかは直接は得られない
- =Generic.Aux= は変換結果を型引数として露出させてくれるので、 =Generic.Aux[A, H]= と =Selector[H, Id]= というふうに書ける
  - これにより、二者の関係が明確になり、正常に連携できるようになる
  - 「 =A= を =H= に変換し、 =H= から =Id= を取り出す」と読めるようになる

=Generic.Aux= を使わない場合、変換結果の型が分からないので =Selector= に手で =HList= の型を教えてやることになってしまい、せっかく得た柔軟性が壊れてしまいます。
_=ops= と連携させるときは =Generic.Aux= を使う、と覚えておくとよいでしょう。_

*** LabelledGeneric

=HList= を変換する =Generic= があるように、 =Record= に対応する =LabelledGeneric= も存在します。

#+BEGIN_SRC dot :file labelledgeneric.png :exports results :cache yes
  digraph {
  h[label="HList"];
  r[label="Record"];
  g[label="Generic" shape=rectangle];
  lg[label="LabelledGeneric" shape=rectangle];
  h -> r [label="ラベルを追加"];
  h -> g [label="他ADTsとの相互変換"];
  r -> lg [label="他ADTsとの相互変換"];
  g -> lg [label="ラベルを追加"];
  }
#+END_SRC

#+RESULTS[8a8ee79c258785450ae9b1335946216e33e0c880]:
[[file:labelledgeneric.png]]

使い方は[[Generic][Generic]]とほぼ同じです:

#+begin_example scala
shapeless.LabelledGeneric[Person].to(me1)
// => ('name->> "Windymelt") :: ('age ->> 29) :: ('gender ->> "male") :: HNil
#+end_example

**** 例: 任意のcase classからnameフィールドを取り出す

[[genericex]]でやったように、今回は =LabelledGeneric= を使って =case class= から特定の名前を持つフィールドを取り出してみましょう。

#+begin_example scala
case class Person(name: String, age: Int, gender: String)
val zundamon = Person("Zundamon", 1, "???")

case class Cat(name: String, age: Int)
val tama = Cat("Tama", 3)

def greeting[A, H <: HList](x: A)(
  implicit gen: shapeless.LabelledGeneric.Aux[A, H],
  ext: shapeless.ops.record.Extractor[H, Record.`'name -> String`.T]
): String = {
  val extracted = ext(gen.to(x))
  val name = extracted(Symbol("name"))
  s"Hi, $name !"
}

greeting(zundamon) // => "Hi, Zundamon !"
greeting(tama) // => "Hi,Tama !"
#+end_example

クラスの構造を乗り越えて、 =name= というフィールドがありさえすれば何でも受け付けられるメソッド =greeting= を定義することができました。
非常に強力だとは思いませんか？

**** =@implicitNotFound= の活用

また、Scala標準の =@implicitNotFound= アノテーションを使うことで、ユーザーフレンドリーなDXを提供できます:

#+begin_example scala
import scala.annotation.implicitNotFound

def greeting[A, H <: HList](x: A)(
  implicit
  @implicitNotFound("HListに変換できません")
  gen: shapeless.LabelledGeneric.Aux[A, H],
  @implicitNotFound("name: Stringを持つオブジェクトである必要があります")
  ext: shapeless.ops.record.Extractor[H, Record.`'name -> String`.T]
): String = {
  val extracted = ext(gen.to(x))
  val name = extracted(Symbol("name"))
  s"Hi, $name !"
}

greeting(42) // コンパイルエラー: HListに変換できません
#+end_example

他にも、 =LabelledGeneric= を使った色々なアイデアが思い浮かびます:

- 任意の =case class= をJSONに変換する
- 同じ名前のフィールドを持つ =case class= 同士を変換し、足りないフィールドをデフォルト値で補う

これは読者への宿題とします。

** Poly

ここでは、関数をポリモーフィックに拡張した、つまり引数として様々な型を取ることをサポートした関数(多相関数)である =Poly= の使い方について説明します。

一般的な関数は特定の型を引数に取りますが、多相関数は複数の引数型に対して処理を定義できます。

*** 型パラメータとの違い

型パラメータ(ジェネリクス)では型を全称量化する、つまり「なんでもよい型」について扱っており、具体的な型のことを知りませんでした。多相関数は、引数としてやってくる型について知っており、なおかつそれが複数であるような関数です。

- 共通点: 異なる型を受け取る
- 型パラメータ: 型を抽象化して変数的に扱う
- 多相関数: 具体的な型はそのまま、型に応じた異なる処理を行う

#+BEGIN_SRC dot :file poly.png :exports results :cache yes
  digraph {
  rankdir = LR
  i1 [label=Int]
  s1 [label=String]
  gen [label=型パラメータ]
  proc1 [label=型をAとみなした処理]
  res1 [label=結果]
  i1 -> gen
  s1 -> gen
  gen -> proc1 [label=A]
  proc1 -> res1

  i2 [label=Int]
  s2 [label=String]
  poly [label=多相関数]
  proci [label=Int用の処理]
  procs [label=String用の処理]
  res2 [label=結果]
  i2 -> poly
  s2 -> poly
  poly -> proci [label="at[Int]"]
  poly -> procs [label="at[String]"]
  proci -> res2
  procs -> res2
  }
#+END_SRC

#+RESULTS[3d51c363683fd5f729c232997451ed2fe5acb553]:
[[file:poly.png]]

*** PolyをHListに適用する

これまでは =HList= を直積、つまりADTsを構成するための道具として解説してきましたが、 =head= や =tail= といった操作をサポートしていることからも分かるとおり、 =HList= は通常の =List= のようにも振舞います。

=HList= を =List= とみなすと、以下のような疑問が浮かびます:

- =List= に対して定義されている =foldLeft= や =map= などの高階操作を =HList= にも適用できるか？

=HList= は一種の =List= なので、各要素に関数を適用すれば =foldLeft= や =map= を実装できそうです。しかし以下のような問題にぶつかります。

- 本質的に =HList= は複数の型をくっつけたものなので、高階関数に与える関数の型を決定できない
- 関数の引数を =Any= にすれば解決するが、型安全性が損なわれてしまう

コード例でこのことを確認してみましょう:

#+begin_example scala
def processHList[H <: HList](hs: H) = {
  val f = ??? // fの引数の型をどう定義したらよい？
  hs.map(f)
}
#+end_example

* Further Reading

- [[https://github.com/milessabin/shapeless/blob/main/core/shared/src/main/scala/shapeless/lenses.scala]] には、[[https://www.optics.dev/Monocle/][Monocle]]にも登場する =Lens= との組み合わせが実装されています。
- https://github.com/milessabin/shapeless/blob/main/core/shared/src/main/scala/shapeless/poly.scala には、多態な関数 =Poly= の実装と、その =HList= との組み合わせが実装されています。
- JSONライブラリ [[https://circe.github.io/circe/][=Circe=]] が提供する =circe.shapes= モジュールは、JSONと =HList= との相互変換をサポートします。

* 参考文献

** <<underscoreio>>The Type Astronaut's Guide to Shapeless

underscoreioによる [[https://underscore.io/books/shapeless-guide/][The Type Astronaut's Guide to Shapeless]] (英語) はshapelessの仕組みを順に解説してくれる良著です。shapelessの各構成要素について知りたい場合は必ず読むと良いでしょう。

#+begin_export html
<script>
console.log('highlighting codes');
hljs.configure({
  languages: ['scala'],
  cssSelector:'pre'
})
hljs.highlightAll();
</script>
#+end_export
