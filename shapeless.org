#+title:  入門⚡Shapeless
#+author: Windymelt
#+date:   2022-12-12

#+html_head: <style> @font-face {font-family: "Berkeley Mono"; src: url("https://www.3qe.us/webfont/BerkeleyMono-Regular.woff2") format("woff2"), url("https://www.3qe.us/webfont/BerkeleyMono-Regular.woff") format("woff");} </style>

#+html_head: <style> p { line-height:1.2; } pre, code { font-family: Berkeley Mono; } </style>

#+begin_center
#+begin_export html
<a href="https://b.hatena.ne.jp/entry/" class="hatena-bookmark-button" data-hatena-bookmark-layout="vertical-normal" data-hatena-bookmark-lang="en" title="このエントリーをはてなブックマークに追加"><img src="https://b.st-hatena.com/images/v4/public/entry-button/button-only@2x.png" alt="このエントリーをはてなブックマークに追加" width="20" height="20" style="border: none;" /></a><script type="text/javascript" src="https://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script>
#+end_export
#+end_center

* 入門⚡Shapeless

#+begin_export html
<link rel="stylesheet"
      href="./highlight/styles/mono-blue.min.css">
<script src="./highlight/highlight.min.js"></script>
#+end_export

** はじめに

この記事では、プログラミング言語 [[https://scala-lang.org][Scala]] において *ジェネリックプログラミング(Generic Programming)* を行うためのライブラリである *[[https://github.com/milessabin/shapeless][shapeless]]* の基本的な利用方法を解説します。

*** この記事で使うshapelessについて

この記事は、 shapeless 2.3.5 に基いて執筆されています。当該バージョンのshapelessは、 =build.sbt= において以下のようにインストールできます:

#+begin_example scala
libraryDependencies += "com.chuusai" %% "shapeless" % "2.3.5"
#+end_example

*** この記事で使うScalaについて

この記事は、Scala 2.13.8に基いて執筆されています。Scala 3系においてもshapelessを利用することはできますが、執筆時点で筆者はScala 3に関する知識を十分に持ち合わせていませんから、Scala 3における動作に関する記述は割愛します。

** ジェネリックプログラミング

ジェネリックプログラミングとは、ある問題領域における *構造* を表現する手段として具体的なclassやtraitを使わず、より抽象的な道具を用いて構造を表現するプログラミング手法です。

また、ジェネリックプログラミングは、JavaやScalaにおけるジェネリクスとは関係ないため注意が必要です。

*** <<genericquote>>ジェネリックプログラミング(shapeless)が必要になる例

- 同じ型の要素を同じ順序で持つcase class同士を相互変換する
- 異なる型が混在し、なおかつ型安全な =Map= を利用する

いずれにせよ、ジェネリックプログラミングとは、クラスや型といった具体的な要素から「構造」という要素を取り出し、それ単体で物事をうまく扱おうという考え方を指しています。

** Shapelessに登場する基礎概念

Shapelessでは、型同士を組み合わせたり取り出したりします。この節では、この目的を達成するために用意されている道具のうち基礎的なものを紹介します。

*** 代数的データ型(ADTs)

先程、 [[genericquote]] で以下のように述べました。

#+begin_quote
ジェネリックプログラミングとは、クラスや型といった具体的な要素から「構造」という要素を取り出し、それ単体で物事をうまく扱おうという考え方を指しています。
#+end_quote

では、 *構造* とは何でしょう。数学的な難しい話は割愛しますが、 *代数的データ型(Algebraic Data Types, ADTs)* を用いることで再帰を含む複雑な持ったデータ型を表現できることがわかっています。
そして、多くの言語ではこのADTsを言語レベルである程度サポートするための機能が備えられており、Scalaもこうした言語のうちの一つです。

ADTsは、 **直積(Product)** と **直和(Coproduct、 余積とも)** から成るデータ型の総称です。
数学的な詳細な説明は割愛しますが、直積は複数のデータ型をくっつけて _両方のデータを同時に表現できるようにした_ ものであり、直和は複数のデータ型をくっつけて _このうちどれか一つを表現できるようにした_ ものです。
この2つを組み合わせることでADTsは様々な抽象的なデータ型を表現する能力を得ます。

例えば、よく知られたデータ構造である[[https://ja.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E6%9C%A8][二分木]]は「木か葉[fn::木構造において、それ以上木構造が深くならないような部分のことを葉と呼びます。]のいずれか」という直和型を2つ合わせて直積にしたものと考えることができ、ADTsで表現することができます。

ADTsを表現するためにScalaに最初から備わっている機能として、 *タプル* 、 *=Either=* 型 、 *クラス* 、 *=sealed trait=* などがあります。そしてshapelessは、ADTsを専門に扱うためのライブラリです。

まずはScalaに備わっているADTsをサポートするための機能がどのような性質を持つか復習しましょう。

*** <<scala-adts>>ScalaにおけるADTsをサポートする手段

この節では、shapelessの理解をより深めるために、Scalaで型を組み合わせるために用意されているいくつかの方法について復習します。

*タプル* は、複数の型を組み合わせて1つの型にします。タプル自体は最も単純な型コンストラクタ[fn::値を持ちうる通常の意味での型ではなく、型を代入することで型を生成する、関数のような型のことを型コンストラクタと呼びます。]の一つであり、それ自体多くの機能を持ちませんが、複数の型を一つにし、それをまた分解できるという最も基本的な機能を提供します。

#+begin_example scala
type StringIntTuple = Tuple2[String, Int]
/* もしくは */
type StringIntTuple = (String, Int)
val tupled: StringIntTuple = ("hoge", 42)
tupled._1 // => "hoge"
tupled._2 // => 42
#+end_example

*=Either=* も複数の型を組み合わせて1つの型にしますが、タプルとは違い、どちらかの型であることを表現します。
実際に値を入れたり取り出したりする際には、 =Left= と =Right= とを用いてどちらの型かを教えます:

#+begin_example scala
type StringIntEither = Either[String, Int]
val l: StringIntEither = Left("hoge")
val r: StringIntEither = Right(42)
#+end_example

*クラス* は、ある意味タプルの強化版です。なぜなら、複数の型を名前付きのフィールドとして持ち、さらに手続きをメソッドとして持っているからです:

#+begin_example scala
case class FooClass(s: String, i: Int) {
  def toString(): String = s"s: $s, i: $i"
}
#+end_example

*=sealed trait=* もまた、 =Either= の強化版です。なぜなら、 =Either= が提供する「型を選ぶ」という機能に付け加えて、それぞれの名前が提供されるからです。

Scalaユーザにとってお馴染の =Option= も =sealed trait= で実装されています:

#+begin_example scala
sealed trait Option[+A]
case class Some[+A](x: A) extends Option[A]
case object None extends Option[Nothing]
#+end_example

*Scalaには複数の型を組み合わせて1つにするための機能がいくつも用意されている* ことが分かりましたね。

それぞれの機能には以下のような共通点があることを確認してください:

- 名前を付けられるものと、付けられないものがある。
  - 名前を付けられる: クラス、 =sealed trait=
  - 名前を付けられない: =Tuple= 、 =Either=
- 3つ以上の型を組み合わせられるものと、組み合わせられないものがある。
  - 組み合わせられる: =Tuple= (ただし、 =Tuple22= までしか用意されていないので22個が上限)、クラス、 =sealed trait=
  - 組み合わせられない: =Either=

*** Shapeless

[[scala-adts][前項]]では、Scalaの言語機能でもある程度ADTsを実装できることを示しました。しかしながら、Scalaの標準言語機能のみを使ってADTsを実装する場合、以下のような制約が伴います:

- =Tuple= が22要素までにしか対応しておらず、これを超えるような直積をともなうADTsを表現できない。
- =TupleN= と =TupleN-1= , =TupleN+1= との間に型的な関連がほぼ無いため、相互運用性が低い。
- クラスや =sealed trait= を用いたADTsは、型が具体的すぎるため柔軟性が低い。
- =Either= は2要素にしか対応しておらず、2要素を越えるADTsを表現するためには複数の =Either= を組み合わせる必要があるが、その運用は複雑を極める。

** HList, HNil

Shapelessでは、直積を表現するためのデータ型として =HList= を用意しています。 =HList= は、前項で登場したタプルと似た振舞いをします。つまり、複数の型を1つにし、その値が両方の型の値を持つことを保証します。

#+begin_example scala
import shapeless.{::, HNil}
type IntStringHList = Int :: String:: HNil
val hlis: IntStringHList = 42 :: "foo" :: HNil
// hlis: shapeless.::[Int, shapeless.::[String, HNil]] = 42 :: "foo" :: HNil
#+end_example

* 参考文献

** <<underscoreio>>The Type Astronaut's Guide to Shapeless

underscoreioによる [[https://underscore.io/books/shapeless-guide/][The Type Astronaut's Guide to Shapeless]] (英語) はshapelessの仕組みを順に解説してくれる良著です。shapelessの各構成要素について知りたい場合は必ず読むと良いでしょう。

#+begin_export html
<script>
console.log('highlighting codes');
hljs.configure({
  languages: ['scala'],
  cssSelector:'pre'
})
hljs.highlightAll();
</script>
#+end_export
